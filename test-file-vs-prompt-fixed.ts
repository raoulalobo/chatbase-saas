/**
 * Script d'ex√©cution des tests de comparaison (version corrig√©e)
 * Fichier upload√© vs Prompt syst√®me avec 50k caract√®res
 */

import { FileUploadTestService } from './test-file-upload-50k-fixed'

console.log('üéÜ COMPARAISON CO√õTS: FICHIER UPLOAD√â vs PROMPT SYST√àME')
console.log('='.repeat(70))
console.log('üìä Test avec contenu de 50 000 caract√®res exactement')
console.log('ü§ñ Mod√®le: Claude Haiku (claude-3-5-haiku-20241022)')

async function main() {
  try {
    const testResults = await FileUploadTestService.runComparisonTest()
    
    console.log('\nüìä R√âSULTATS D√âTAILL√âS:')
    console.log('='.repeat(50))
    
    // Affichage d√©taill√© des r√©sultats
    const questions = new Set(testResults.results.map(r => r.question))
    
    for (const question of questions) {
      const withFile = testResults.results.find(r => r.question === question && r.method === 'file-upload')
      const withPrompt = testResults.results.find(r => r.question === question && r.method === 'system-prompt')
      
      console.log('\n‚ùì QUESTION:', question)
      
      if (withFile) {
        console.log('\nüìÅ AVEC FICHIER UPLOAD√â:')
        if (withFile.error) {
          console.log('   ‚ùå Erreur:', withFile.error)
        } else {
          console.log('   üìä Tokens:', withFile.totalTokens, `(${withFile.tokensInput} in + ${withFile.tokensOutput} out)`)
          console.log('   üí∞ Co√ªt: $' + (
            FileUploadTestService.calculateCost(withFile.tokensInput, 'input') + 
            FileUploadTestService.calculateCost(withFile.tokensOutput, 'output')
          ).toFixed(6))
          console.log('   ‚è±Ô∏è  Temps:', withFile.responseTime + 'ms')
          console.log('   üìÑ ID fichier:', withFile.fileId)
          console.log('   üí¨ R√©ponse:', withFile.response.substring(0, 150) + '...')
        }
      }
      
      if (withPrompt) {
        console.log('\nüìú AVEC PROMPT SYST√àME:')
        if (withPrompt.error) {
          console.log('   ‚ùå Erreur:', withPrompt.error)
        } else {
          console.log('   üìä Tokens:', withPrompt.totalTokens, `(${withPrompt.tokensInput} in + ${withPrompt.tokensOutput} out)`)
          console.log('   üí∞ Co√ªt: $' + (
            FileUploadTestService.calculateCost(withPrompt.tokensInput, 'input') + 
            FileUploadTestService.calculateCost(withPrompt.tokensOutput, 'output')
          ).toFixed(6))
          console.log('   ‚è±Ô∏è  Temps:', withPrompt.responseTime + 'ms')
          console.log('   üí¨ R√©ponse:', withPrompt.response.substring(0, 150) + '...')
        }
      }
      
      // Comparaison directe
      if (withFile && withPrompt && !withFile.error && !withPrompt.error) {
        const tokenDiff = withPrompt.totalTokens - withFile.totalTokens
        const costDiff = (
          FileUploadTestService.calculateCost(withPrompt.tokensInput, 'input') + 
          FileUploadTestService.calculateCost(withPrompt.tokensOutput, 'output')
        ) - (
          FileUploadTestService.calculateCost(withFile.tokensInput, 'input') + 
          FileUploadTestService.calculateCost(withFile.tokensOutput, 'output')
        )
        
        console.log('\n‚öñÔ∏è  COMPARAISON DIRECTE:')
        console.log('   ‚öôÔ∏è  Diff√©rence tokens:', tokenDiff > 0 ? '+' + tokenDiff : tokenDiff)
        console.log('   üí∏ Diff√©rence co√ªt: $' + (costDiff >= 0 ? '+' : '') + costDiff.toFixed(6))
        console.log('   ' + (tokenDiff < 0 ? 'üí∞ √âCONOMIE avec fichier' : 'üí∏ SURCO√õT avec fichier'))
      }
      
      console.log('-'.repeat(50))
    }
    
    // R√©sum√© comparatif global
    console.log('\nüéØ ANALYSE COMPARATIVE GLOBALE:')
    console.log('='.repeat(50))
    
    const { comparison } = testResults
    
    console.log('\nüìÅ FICHIER UPLOAD√â (total):')
    console.log('   üìä Tokens totaux:', comparison.fileUpload.totalTokens)
    console.log('   üí∞ Co√ªt total: $' + comparison.fileUpload.totalCost.toFixed(6))
    console.log('   ‚è±Ô∏è  Temps moyen:', Math.round(comparison.fileUpload.avgResponseTime) + 'ms')
    
    console.log('\nüìú PROMPT SYST√àME (total):')
    console.log('   üìä Tokens totaux:', comparison.systemPrompt.totalTokens)
    console.log('   üí∞ Co√ªt total: $' + comparison.systemPrompt.totalCost.toFixed(6))
    console.log('   ‚è±Ô∏è  Temps moyen:', Math.round(comparison.systemPrompt.avgResponseTime) + 'ms')
    
    console.log('\n‚öñÔ∏è  DIFF√âRENCES:')
    console.log('   ‚öôÔ∏è  Tokens:', comparison.difference.tokensDiff > 0 ? '+' + comparison.difference.tokensDiff : comparison.difference.tokensDiff)
    console.log('   üí∏ Co√ªt: $' + (comparison.difference.costDiff >= 0 ? '+' : '') + comparison.difference.costDiff.toFixed(6))
    console.log('   ‚è±Ô∏è  Temps:', (comparison.difference.timeDiff >= 0 ? '+' : '') + Math.round(comparison.difference.timeDiff) + 'ms')
    
    if (comparison.difference.costSavingsPercent !== 0) {
      console.log('   üìà √âconomie relative:', Math.abs(comparison.difference.costSavingsPercent).toFixed(1) + '%')
    }
    
    // Extrapolation pour 1000 requ√™tes
    console.log('\nüöÄ EXTRAPOLATION POUR 1000 REQU√äTES:')
    console.log('='.repeat(50))
    
    const fileUpload1k = {
      tokens: comparison.fileUpload.totalTokens * 200, // 5 questions -> 1000 req = x200
      cost: comparison.fileUpload.totalCost * 200
    }
    
    const systemPrompt1k = {
      tokens: comparison.systemPrompt.totalTokens * 200,
      cost: comparison.systemPrompt.totalCost * 200
    }
    
    console.log('üìÅ Fichier upload√© (1000 req):', fileUpload1k.tokens.toLocaleString(), 'tokens, $' + fileUpload1k.cost.toFixed(2))
    console.log('üìú Prompt syst√®me (1000 req):', systemPrompt1k.tokens.toLocaleString(), 'tokens, $' + systemPrompt1k.cost.toFixed(2))
    console.log('üí∞ √âconomie avec fichiers: $' + (systemPrompt1k.cost - fileUpload1k.cost).toFixed(2))
    
    // Recommandations
    console.log('\nüí° RECOMMANDATIONS:')
    console.log('='.repeat(50))
    
    if (comparison.difference.costDiff < 0) {
      console.log('‚úÖ Les fichiers upload√©s sont plus √©conomiques')
      console.log('   ‚Üí Utiliser l\'API Files pour les gros contenus (>10k caract√®res)')
      console.log('   ‚Üí √âconomie significative sur les conversations longues')
      console.log('   ‚Üí R√©duction de la consommation de tokens d\'input')
    } else {
      console.log('‚ö†Ô∏è  Les prompts syst√®me sont plus √©conomiques pour ce cas')
      console.log('   ‚Üí √âvaluer le ratio co√ªt/complexit√© de mise en ≈ìuvre')
      console.log('   ‚Üí L\'API Files peut avoir des co√ªts cach√©s ou ne pas supporter les fichiers texte')
    }
    
    if (Math.abs(comparison.difference.timeDiff) > 1000) {
      console.log('‚è±Ô∏è  Diff√©rence de performance notable:', Math.abs(comparison.difference.timeDiff) + 'ms')
      console.log('   ‚Üí Consid√©rer l\'exp√©rience utilisateur dans le choix')
    }
    
    // Notes importantes
    console.log('\nüìù NOTES IMPORTANTES:')
    console.log('='.repeat(50))
    console.log('‚Ä¢ L\'API Files est en beta et peut √©voluer')
    console.log('‚Ä¢ La syntaxe d\'utilisation des fichiers dans les messages n\'est pas document√©e')
    console.log('‚Ä¢ Les r√©sultats peuvent varier selon la disponibilit√© de l\'API Files')
    console.log('‚Ä¢ Test r√©alis√© avec Claude Haiku - les co√ªts peuvent diff√©rer avec Sonnet')
    
    console.log('\nüéâ Test termin√© avec succ√®s !')
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error)
    
    if (error instanceof Error) {
      if (error.message.includes('HTTP 400') || error.message.includes('HTTP 401')) {
        console.log('\nüí° DIAGNOSTIC:')
        console.log('‚Ä¢ L\'API Files semble ne pas √™tre accessible avec cette cl√© API')
        console.log('‚Ä¢ V√©rifiez que votre compte a acc√®s aux API beta d\'Anthropic')
        console.log('‚Ä¢ L\'API Files pourrait n√©cessiter une autorisation sp√©ciale')
      }
    }
    
    console.log('\nüîÑ ALTERNATIVE: Utilisez les r√©sultats du test-50k-prompt.ts existant')
    console.log('   Celui-ci compare d√©j√† prompt court vs prompt long de 50k caract√®res')
    
    process.exit(1)
  }
}

main()