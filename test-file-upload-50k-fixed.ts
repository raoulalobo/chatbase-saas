/**
 * Script de test des co√ªts d'upload de fichier vs prompt syst√®me (version corrig√©e)
 * Compare l'utilisation d'un fichier upload√© de 50k caract√®res vs prompt syst√®me √©quivalent
 */

import Anthropic from "@anthropic-ai/sdk"
import * as fs from "fs"
import * as path from "path"

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
})

interface FileUploadTestResult {
  method: 'file-upload' | 'system-prompt'
  question: string
  response: string
  tokensInput: number
  tokensOutput: number
  totalTokens: number
  responseTime: number
  fileId?: string
  error?: string
}

export class FileUploadTestService {
  /**
   * Upload le fichier vers l'API Anthropic Files via HTTP direct
   */
  static async uploadFile(filePath: string): Promise<string> {
    try {
      const fileContent = fs.readFileSync(filePath)
      
      console.log('üìÅ Upload du fichier:', filePath)
      console.log('üìä Taille:', fileContent.length, 'octets')
      
      // Pr√©paration des donn√©es multipart/form-data
      const formData = new FormData()
      const blob = new Blob([fileContent], { type: 'text/plain' })
      formData.append('file', blob, path.basename(filePath))
      
      // Appel HTTP direct √† l'API Anthropic Files
      const response = await fetch('https://api.anthropic.com/v1/files', {
        method: 'POST',
        headers: {
          'x-api-key': process.env.ANTHROPIC_API_KEY!,
          'anthropic-version': '2023-06-01',
          'anthropic-beta': 'files-api-2025-04-14'
        },
        body: formData
      })
      
      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`HTTP ${response.status}: ${errorText}`)
      }
      
      const result = await response.json()
      
      console.log('‚úÖ Fichier upload√© avec succ√®s:', result.id)
      console.log('üìã Nom:', result.filename)
      console.log('üîÑ Type MIME:', result.mime_type)
      console.log('üìè Taille:', result.size_bytes, 'octets')
      
      return result.id
      
    } catch (error: any) {
      console.error('‚ùå Erreur lors de l\'upload du fichier:', error)
      throw error
    }
  }

  /**
   * Teste avec fichier upload√© - utilisation √† d√©terminer selon la doc
   */
  static async testWithFileUpload(
    question: string, 
    fileId: string
  ): Promise<FileUploadTestResult> {
    const startTime = Date.now()
    
    try {
      // Premi√®re tentative : r√©f√©rence du fichier dans le contenu
      const message = await anthropic.messages.create({
        model: "claude-3-5-haiku-20241022",
        max_tokens: 2000,
        temperature: 0.3,
        system: `Tu es Raoul, agent responsable du service client Oris Finance.
        
INSTRUCTIONS :
- Utilise EXCLUSIVEMENT les informations contenues dans le fichier fourni
- R√©ponds de mani√®re pr√©cise et factuelle
- Si l'information n'est pas dans le fichier, dis-le clairement`,
        
        messages: [{
          role: "user",
          content: [
            {
              type: "text",
              text: question
            },
            {
              type: "document",
              source: {
                type: "file",
                file_id: fileId
              }
            }
          ]
        }]
      })

      const responseTime = Date.now() - startTime
      
      const responseText = message.content
        .filter(block => block.type === "text")
        .map(block => block.text)
        .join("")

      return {
        method: 'file-upload',
        question,
        response: responseText,
        tokensInput: message.usage.input_tokens,
        tokensOutput: message.usage.output_tokens,
        totalTokens: message.usage.input_tokens + message.usage.output_tokens,
        responseTime,
        fileId
      }
    } catch (error: any) {
      console.error("Erreur lors du test avec fichier upload√©:", error)
      
      return {
        method: 'file-upload',
        question,
        response: "",
        tokensInput: 0,
        tokensOutput: 0,
        totalTokens: 0,
        responseTime: Date.now() - startTime,
        fileId,
        error: error.message
      }
    }
  }

  /**
   * Teste avec prompt syst√®me (contenu du fichier dans le prompt)
   */
  static async testWithSystemPrompt(
    question: string, 
    fileContent: string
  ): Promise<FileUploadTestResult> {
    const startTime = Date.now()
    
    try {
      const message = await anthropic.messages.create({
        model: "claude-3-5-haiku-20241022",
        max_tokens: 2000,
        temperature: 0.3,
        system: `Tu es Raoul, agent responsable du service client Oris Finance.

INFORMATIONS ORIS FINANCE :
${fileContent}

INSTRUCTIONS :
- Utilise EXCLUSIVEMENT les informations ci-dessus
- R√©ponds de mani√®re pr√©cise et factuelle
- Si l'information n'est pas disponible, dis-le clairement`,
        
        messages: [{
          role: "user",
          content: question
        }]
      })

      const responseTime = Date.now() - startTime
      
      const responseText = message.content
        .filter(block => block.type === "text")
        .map(block => block.text)
        .join("")

      return {
        method: 'system-prompt',
        question,
        response: responseText,
        tokensInput: message.usage.input_tokens,
        tokensOutput: message.usage.output_tokens,
        totalTokens: message.usage.input_tokens + message.usage.output_tokens,
        responseTime
      }
    } catch (error: any) {
      console.error("Erreur lors du test avec prompt syst√®me:", error)
      
      return {
        method: 'system-prompt',
        question,
        response: "",
        tokensInput: 0,
        tokensOutput: 0,
        totalTokens: 0,
        responseTime: Date.now() - startTime,
        error: error.message
      }
    }
  }

  /**
   * Calcule le co√ªt approximatif en USD pour Claude Haiku
   */
  static calculateCost(tokens: number, type: 'input' | 'output'): number {
    // Prix Claude Haiku (approximatif)
    const HAIKU_INPUT_COST = 0.00025 / 1000   // $0.00025 per 1k input tokens
    const HAIKU_OUTPUT_COST = 0.00125 / 1000  // $0.00125 per 1k output tokens
    
    return type === 'input' 
      ? tokens * HAIKU_INPUT_COST 
      : tokens * HAIKU_OUTPUT_COST
  }

  /**
   * Teste et compare les deux m√©thodes
   */
  static async runComparisonTest(): Promise<{
    results: FileUploadTestResult[]
    comparison: {
      fileUpload: {
        totalTokens: number
        totalCost: number
        avgResponseTime: number
      }
      systemPrompt: {
        totalTokens: number
        totalCost: number
        avgResponseTime: number
      }
      difference: {
        tokensDiff: number
        costDiff: number
        timeDiff: number
        costSavingsPercent: number
      }
    }
  }> {
    const filePath = path.join(__dirname, 'test-file-50k.txt')
    const fileContent = fs.readFileSync(filePath, 'utf-8')
    
    console.log('üìÑ Contenu du fichier:', fileContent.length, 'caract√®res')
    
    // Upload du fichier
    console.log('\nüöÄ PHASE 1: UPLOAD DU FICHIER')
    console.log('='.repeat(50))
    const fileId = await this.uploadFile(filePath)
    
    const testQuestions = [
      "Quels sont les services propos√©s par Oris Finance ?",
      "Quel est le num√©ro de t√©l√©phone d'Oris Finance ?", 
      "Quelles sont les conditions d'√©ligibilit√© pour un cr√©dit ?",
      "Quels sont les horaires d'ouverture ?",
      "Comment contacter le service client ?"
    ]

    const results: FileUploadTestResult[] = []
    
    console.log('\nüß™ PHASE 2: TESTS COMPARATIFS')
    console.log('='.repeat(50))
    
    for (const question of testQuestions) {
      console.log('\n‚ùì Question:', `"${question}"`)
      
      // Test avec fichier upload√©
      console.log('   üìÅ Test avec fichier upload√©...')
      const withFile = await this.testWithFileUpload(question, fileId)
      
      // Test avec prompt syst√®me  
      console.log('   üìú Test avec prompt syst√®me...')
      const withPrompt = await this.testWithSystemPrompt(question, fileContent)
      
      results.push(withFile, withPrompt)
      
      // Affichage des r√©sultats interm√©diaires
      if (!withFile.error && !withPrompt.error) {
        console.log('   ‚öôÔ∏è  Tokens (fichier):', withFile.totalTokens)
        console.log('   ‚öôÔ∏è  Tokens (prompt):', withPrompt.totalTokens)
        console.log('   üí∞ √âconomie tokens:', withPrompt.totalTokens - withFile.totalTokens)
        console.log('   ‚è±Ô∏è  Temps (fichier):', withFile.responseTime + 'ms')
        console.log('   ‚è±Ô∏è  Temps (prompt):', withPrompt.responseTime + 'ms')
      }
    }

    // Analyse des r√©sultats
    const fileResults = results.filter(r => r.method === 'file-upload' && !r.error)
    const promptResults = results.filter(r => r.method === 'system-prompt' && !r.error)
    
    const fileUploadStats = {
      totalTokens: fileResults.reduce((sum, r) => sum + r.totalTokens, 0),
      totalCost: fileResults.reduce((sum, r) => 
        sum + this.calculateCost(r.tokensInput, 'input') + this.calculateCost(r.tokensOutput, 'output'), 0),
      avgResponseTime: fileResults.reduce((sum, r) => sum + r.responseTime, 0) / fileResults.length
    }
    
    const systemPromptStats = {
      totalTokens: promptResults.reduce((sum, r) => sum + r.totalTokens, 0),
      totalCost: promptResults.reduce((sum, r) => 
        sum + this.calculateCost(r.tokensInput, 'input') + this.calculateCost(r.tokensOutput, 'output'), 0),
      avgResponseTime: promptResults.reduce((sum, r) => sum + r.responseTime, 0) / promptResults.length
    }

    const difference = {
      tokensDiff: systemPromptStats.totalTokens - fileUploadStats.totalTokens,
      costDiff: systemPromptStats.totalCost - fileUploadStats.totalCost,
      timeDiff: systemPromptStats.avgResponseTime - fileUploadStats.avgResponseTime,
      costSavingsPercent: fileUploadStats.totalCost > 0 
        ? ((systemPromptStats.totalCost - fileUploadStats.totalCost) / systemPromptStats.totalCost) * 100
        : 0
    }

    return {
      results,
      comparison: {
        fileUpload: fileUploadStats,
        systemPrompt: systemPromptStats,
        difference
      }
    }
  }
}